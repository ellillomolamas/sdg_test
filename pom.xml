<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.sdg</groupId>
  <artifactId>test</artifactId>
  <version>${test.parent.version}</version>
  <packaging>pom</packaging>

  <organization>
    <name>sdg</name>
  </organization>

  <modules>
	<module>sdg_ingestion</module>
  </modules>

  <properties>
    <test.parent.version>1.0.0</test.parent.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <maven.deploy.plugin>2.8.2</maven.deploy.plugin>
    <maven.deploy.skip>true</maven.deploy.skip>
    <maven.clean.plugin>3.1.0</maven.clean.plugin>
    <maven.resources.plugin>3.1.0</maven.resources.plugin>
    <maven.compiler.plugin>3.8.0</maven.compiler.plugin>
    <maven.surefire.plugin>2.22.1</maven.surefire.plugin>
    <maven.jar.plugin>3.1.0</maven.jar.plugin>
    <maven.javadoc.plugin>3.0.1</maven.javadoc.plugin>
    <maven.release.plugin>2.5.3</maven.release.plugin>
    <maven.source.plugin>3.0.1</maven.source.plugin>
    <maven.assembly.plugin>3.1.0</maven.assembly.plugin>
    <maven.failsafe.plugin>2.22.1</maven.failsafe.plugin>
    <maven.install.plugin>2.5.2</maven.install.plugin>
    <flatten-maven.plugin>1.0.1</flatten-maven.plugin>
    <scala.version>2.12.10</scala.version>
    <scala.binary.version>2.12</scala.binary.version>
    <scala.maven.plugin>3.4.2</scala.maven.plugin>
    <scalatest.maven.plugin>2.0.0</scalatest.maven.plugin>
    <spark.version>3.1.2</spark.version>
    <spark.version.holdenkarau>2.4.3_0.12.0</spark.version.holdenkarau>
    <spark.xml.databricks.version>0.7.0</spark.xml.databricks.version>
    <spark.csv.databricks.version>1.5.0</spark.csv.databricks.version>
    <spark-avro.version>4.0.0</spark-avro.version>
    <org.apache.avro.version>1.7.7</org.apache.avro.version>
    <hive.version>2.3.6-mapr-1912</hive.version>
    <org.json.version>20180813</org.json.version>
    <kafka.version>1.1.1</kafka.version>
    <ovoenergy.version>0.3.19</ovoenergy.version>
    <circe.version>0.8.0</circe.version>

    <hadoop.version>2.7.0-mapr-1808</hadoop.version>
    <xerces.version>2.11.0</xerces.version>
    <flume.version>1.8.0-mapr-1904</flume.version>

    <!-- Asciidoctor documentation -->

    <asciidoctor.maven.plugin.version>1.5.7.1</asciidoctor.maven.plugin.version>
    <asciidoctorj.version>1.5.8.1</asciidoctorj.version>
    <asciidoctorj.diagram.version>1.5.11</asciidoctorj.diagram.version>
    <asciidoctorj.pdf.version>1.5.0-alpha.16</asciidoctorj.pdf.version>
    <jruby.version>9.1.17.0</jruby.version>

    <!-- Other dependencies -->
    <com.github.scopt.version>3.7.0</com.github.scopt.version>
    <com.typesafe.version>1.3.3</com.typesafe.version>
    <commons.collections.version>3.2.2</commons.collections.version>
    <rogach.scallop.version>3.1.5</rogach.scallop.version>
    <joda.convert.version>2.1.2</joda.convert.version>
    <play.json.version>2.6.11</play.json.version>
    <junit.version>4.12</junit.version>
    <junit-jupiter.version>5.5.1</junit-jupiter.version>
    <org.scalatest.version>3.0.7</org.scalatest.version>
    <hadoop.minicluster.version>2.9.1</hadoop.minicluster.version>
    <commons-csv.version>1.5</commons-csv.version>
    <jackson.version>2.9.2</jackson.version>
    <jcraft.version>0.1.55</jcraft.version>
    <scalikejdbc.version>3.3.4</scalikejdbc.version>
    <h2.version>1.4.199</h2.version>

    <!-- Publishing to atlasian
     Use them only when publishing-->
    <confluence.user>passedThrougCommand</confluence.user>
    <confluence.pwd>passedThrougCommand</confluence.pwd>


    <!-- Sonarqube related properties -->
    <sonar.maven.plugin.version>3.6.0.1398</sonar.maven.plugin.version>
    <scapegoat.version>1.3.8</scapegoat.version>
    <jacoco.maven.plugin.version>0.8.3</jacoco.maven.plugin.version>
    <dependency.check.maven.version>4.0.2</dependency.check.maven.version>
    <sonar.scala.version>${scala.binary.version}</sonar.scala.version>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.junit.reportPaths>${project.build.directory}/surefire-reports</sonar.junit.reportPaths>
    <sonar.scala.scapegoat.reportPath>${project.build.directory}/scapegoat.xml</sonar.scala.scapegoat.reportPath>
    <sonar.jacoco.reportPaths>${project.build.directory}/jacoco.exec</sonar.jacoco.reportPaths>
    <sonar.sources>src/main/scala</sonar.sources>
    <sonar.tests>src/test/scala</sonar.tests>
    <sonar.scm.provider>git</sonar.scm.provider>
  </properties>

  <profiles>
    <profile>
      <id>dev</id>
      <properties>
        <confluence.parent.page>11905538</confluence.parent.page>
        <confluence.suffix xml:space="preserve">-QA</confluence.suffix>
        <release-type>-SNAPSHOT</release-type>
      </properties>
    </profile>
    <profile>
      <id>pro</id>
      <properties>
        <confluence.parent.page>11904941</confluence.parent.page>
        <confluence.suffix xml:space="preserve"></confluence.suffix>
        <release-type></release-type>
      </properties>
    </profile>
  </profiles>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>${scala.binary.version}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${scala.version}</version>
      </dependency>
      <!-- SPARK dependencies -->
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-hive_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-avro_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>com.databricks</groupId>
        <artifactId>spark-xml_${scala.binary.version}</artifactId>
        <version>${spark.xml.databricks.version}</version>
      </dependency>
      <dependency>
        <groupId>com.databricks</groupId>
        <artifactId>spark-csv_${scala.binary.version}</artifactId>
        <version>${spark.csv.databricks.version}</version>
      </dependency>

      <dependency>
        <groupId>com.github.scopt</groupId>
        <artifactId>scopt_${scala.binary.version}</artifactId>
        <version>${com.github.scopt.version}</version>
      </dependency>
      <dependency>
        <groupId>com.typesafe</groupId>
        <artifactId>config</artifactId>
        <version>${com.typesafe.version}</version>
      </dependency>
      <dependency>
        <groupId>commons-collections</groupId>
        <artifactId>commons-collections</artifactId>
        <version>${commons.collections.version}</version>
      </dependency>
      <dependency>
        <groupId>org.rogach</groupId>
        <artifactId>scallop_${scala.binary.version}</artifactId>
        <version>${rogach.scallop.version}</version>
      </dependency>
      <dependency>
        <groupId>org.joda</groupId>
        <artifactId>joda-convert</artifactId>
        <version>${joda.convert.version}</version>
      </dependency>
      <dependency>
        <groupId>com.typesafe.play</groupId>
        <artifactId>play-json_${scala.binary.version}</artifactId>
        <version>${play.json.version}</version>
      </dependency>

      <dependency>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest_${scala.binary.version}</artifactId>
        <version>${org.scalatest.version}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${maven.assembly.plugin}</version>
          <configuration>
            <descriptorRefs>
              <descriptorRef>jar-with-dependencies</descriptorRef>
            </descriptorRefs>
          </configuration>
          <executions>
            <execution>
              <id>make-assembly</id>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven.deploy.plugin}</version>
          <configuration>
            <deployAtEnd>true</deployAtEnd>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.scalatest</groupId>
          <artifactId>scalatest-maven-plugin</artifactId>
          <version>${scalatest.maven.plugin}</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven.failsafe.plugin}</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven.install.plugin}</version>
        </plugin>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${sonar.maven.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco.maven.plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${maven.clean.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resources.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven.jar.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven.javadoc.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <version>${maven.release.plugin}</version>
      </plugin>
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven.source.plugin}</version>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>pre-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${scala.maven.plugin}</version>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
          </execution>
          <execution>
            <id>Scaladoc</id>
            <goals>
              <goal>doc</goal>
            </goals>
            <phase>site</phase>
            <configuration>
              <aggregateDirectOnly>false</aggregateDirectOnly>
              <sendJavaToScalac>true</sendJavaToScalac>
              <header>Open Data Lake</header>
              <footer>ODL Services</footer>
              <args>
                <arg>-groups</arg>
                <arg>-diagrams</arg>
                <arg>-doc-format:pdf</arg>
              </args>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <args>
            <arg>-P:scapegoat:dataDir:${project.build.directory}</arg>
            <arg>-P:scapegoat:reports:xml</arg>
            <arg>-P:scapegoat:overrideLevels:TraversableHead=Warning:MapGetAndGetOrElse=Warning:OptionGet=Warning:TraversableLast=Warning:TraversableHead=Warning:TryGet=Warning:IncorrectlyNamedExceptions=Warning:UnsafeStringContains=Warning:UnsafeContains=Warning:EmptyInterpolatedString=Warning</arg>
          </args>
          <compilerPlugins>
            <compilerPlugin>
              <groupId>com.sksamuel.scapegoat</groupId>
              <artifactId>scalac-scapegoat-plugin_${scala.binary.version}</artifactId>
              <version>${scapegoat.version}</version>
            </compilerPlugin>
          </compilerPlugins>
        </configuration>
      </plugin>
      <!-- Scalastyle pluging allows us to enforce good code -->
      <plugin>
        <groupId>org.scalastyle</groupId>
        <artifactId>scalastyle-maven-plugin</artifactId>
        <version>1.0.0</version>
        <configuration>
          <verbose>false</verbose>
          <failOnViolation>true</failOnViolation>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
          <failOnWarning>false</failOnWarning>
          <sourceDirectory>${project.basedir}/src/main/scala</sourceDirectory>
          <testSourceDirectory>${project.basedir}/src/test/scala</testSourceDirectory>
          <!-- We must have a .mvn folder in the root project for this variable to work -->
          <configLocation>${maven.multiModuleProjectDirectory}/scalastyle-config.xml</configLocation>
          <outputFile>${project.build.directory}/scalastyle-output.xml</outputFile>
          <outputEncoding>UTF-8</outputEncoding>
          <inputEncoding>UTF-8</inputEncoding>
        </configuration>
        <executions>
          <execution>
            <id>scalastyle-check</id>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Asciidoctor documentation build -->
      <plugin>
        <groupId>org.asciidoctor</groupId>
        <artifactId>asciidoctor-maven-plugin</artifactId>
        <version>${asciidoctor.maven.plugin.version}</version>
        <dependencies>
          <!-- Comment this section to use the default jruby artifact provided by the plugin -->
          <dependency>
            <groupId>org.jruby</groupId>
            <artifactId>jruby-complete</artifactId>
            <version>${jruby.version}</version>
          </dependency>
          <!-- Comment this section to use the default AsciidoctorJ artifact provided by the plugin -->
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj</artifactId>
            <version>${asciidoctorj.version}</version>
          </dependency>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-diagram</artifactId>
            <version>${asciidoctorj.diagram.version}</version>
          </dependency>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-pdf</artifactId>
            <version>${asciidoctorj.pdf.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <sourceDirectory>odl-docs</sourceDirectory>
          <relativeBaseDir>true</relativeBaseDir>
          <preserveDirectories>true</preserveDirectories>
          <requires>
            <require>asciidoctor-diagram</require>
            <require>rouge</require>
          </requires>
          <attributes>
            <imagesdir>${basedir}/docs/images</imagesdir>
            <docVersion>${project.version}</docVersion>
            <icons>font</icons>
            <toc />
            <sectnums>true</sectnums>
            <sectanchors />
            <idprefix />
            <idseparator>-</idseparator>
          </attributes>
        </configuration>
        <executions>
          <execution>
            <id>output-html</id>
            <phase>site</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html5</backend>
              <sourceHighlighter>prettify</sourceHighlighter>
              <attributes>
                <toc>left</toc>
                <revnumber>${project.version}</revnumber>
                <revdate>${maven.build.timestamp}</revdate>
                <sectanchors>true</sectanchors>
                <docinfo1>true</docinfo1>
              </attributes>
            </configuration>
          </execution>

          <execution>
            <id>asciidoc-usermanual-to-pdf</id>
            <phase>site</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>pdf</backend>
              <sourceHighlighter>rouge</sourceHighlighter>
              <attributes>
                <imagesdir>${project.build.directory}/generated-docs/images</imagesdir>
                <imagesoutdir>${project.build.directory}/generated-docs/images</imagesoutdir>
                <pagenums/>
              </attributes>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>
